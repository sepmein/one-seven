# Analysis File Creation {#sec-fcreate-zam}

```{r}
#| label: zam_analysis_file_creation_library
#| message: false
#| echo: fenced
#| warning: false
require(readxl)
require(readr)
require(Hmisc)
require(here)
require(data.table)
require(lubridate)
require(qs)
require(qreport)
```

## Raw data

Zambia submitted data to WHO at 23th, July, 2024.

16 files were submitted:

-   **DHIS2**

    -   HMIS data Lukwipa and Kankumba.xls

    -   Weekly data.xlsx

-   **Surveys**

    -   1,7_experiment_data_status.xlsx

    -   Baseline and Endline Survey- Codebook.xlsx

    -   **Baseline**

        -   census_phone_combine.csv

        -   household_member_phone_combine.csv

        -   household_phone_combine.csv

        -   net_phone_combine.csv

        -   Rufunsa 1,7mRCT BASE-LINE MICROSCOPY RESULTS final.xlsx

        -   visit_phone_combine.csv

    -   **Endline**

        -   1,7 Parasite Microscope endline survey 2023 results_updated Rufunsa_version.xlsx

        -   Endline household_member_all.csv

        -   Endline-census.xls

        -   Endline-household.xls

        -   Endline-net.xls

        -   Endline-visit.xls

### Data Pathes

```{r}
source(here("R/paths.R"))
sourcr(here("R/data.R"))
```

### Load Data

```{r}
#| label: zam_load_raw_data
#| warning: false
#| message: false

# DHIS2
zam_dh_hf_raw <- read_excel(
  here(PATH_ZAM_DH_HF_RAW_240723),
  skip = 1,
  col_types = c("text",
                "text",
                "numeric",
                "numeric",
                "numeric",
                "numeric",
                "numeric",
                "numeric",
                "numeric",
                "numeric",
                "numeric"
                )
  )
zam_dh_vl_raw <- read_excel(here(PATH_ZAM_DH_VL_RAW_240723) , skip = 2)
zam_dh_vl_pop <- read_excel(here(PATH_ZAM_DH_VL_POP_240908))
zam_dh_vl_raw <- read_excel(here(PATH_ZAM_DH_VL_PROCESSED_240908))
# Survey
zam_hh_hh_raw <- read_excel(here(PATH_ZAM_HH_HH_RAW_240723))
zam_hh_codebook_raw <- read_excel(here(PATH_ZAM_HH_CODEBOOK_RAW_240723))

## Baseline
zam_hhb_hh_houseinfo_raw <- fread(here(PATH_ZAM_HHB_HH_HOUSEINFO_RAW_240723))
zam_hhb_pr_raw <- fread(here(PATH_ZAM_HHB_PR_RAW_240723))
zam_hhb_hh_detailed_houseinfo_raw <- fread(here(PATH_ZAM_HHB_HH_DETAILED_HOUSEINFO_RAW_240723))
zam_hhb_hh_itn_raw <- fread(here(PATH_ZAM_HHB_HH_ITN_RAW_240723))
zam_hhb_hh_test_raw <- read_excel(here(PATH_ZAM_HHB_HH_TEST_RAW_240723))
zam_hhb_hh_visit_raw <- fread(here(PATH_ZAM_HHB_HH_VISIT_RAW_240723))

## Endline
zam_hhe_hh_houseinfo_raw <- read_excel(here(PATH_ZAM_HHE_HH_HOUSEINFO_RAW_240723))
zam_hhe_pr_raw <- fread(here(PATH_ZAM_HHE_PR_RAW_240723))
zam_hhe_hh_detailed_houseinfo_raw <- read_excel(here(PATH_ZAM_HHE_HH_DETAILED_HOUSEINFO_RAW_240723))
zam_hhe_hh_itn_raw <- read_excel(here(PATH_ZAM_HHE_HH_ITN_RAW_240723))
zam_hhe_hh_test_raw <- read_excel(here(PATH_ZAM_HHE_HH_TEST_RAW_240723))
zam_hhe_hh_visit_raw <- read_excel(here(PATH_ZAM_HHE_HH_VISIT_RAW_240723))
```

## DHIS2 data

### Monthly HFCA Malaria

```{r}
#| label: zam-updata-dh-hf
#| lst-label: zam-updata-dh-hf
#| lst-cap: Recode HFCA data from DHIS2, Zambia
zam_dh_hf <- upData(
  zam_dh_hf_raw,
  YEAR = my(periodname) |> year(),
  MONTH = my(periodname) |> month(),
  rename = .q(organisationunitname = HFCA,
              "Malaria Clinical Cases" = MC_CLN,
              "Malaria Confirmed Cases" = MC_CFM,
              "Malaria in Pregnancy Clinical Cases" = MPC_CLN,
              "Malaria in Pregnancy Confirmed Cases" = MPC_CFM,
              "Malaria Incidence Clinical+Confirmed all ages" = MI,
              "Malaria incidence _Confirmed rate all ages" = MI_CFM,
              "Malaria death 5 years and older - total" = MD_OV5,
              "Malaria death under 5 years - total" = MD_U5,
              "Malaria case confirmation rate (%)" = MC_CFR
              ),
  labels = c(
    HFCA = "Health facility catchment area",
    MC_CLN = "Reported clinical diagnosed malaria cases in the HFCA",
    MC_CFM = "Reported confirmed malaria cases in the HFCA",
    MPC_CLN = "Reported clinical diagnosed malaria cases in pregnant women in the HFCA",
    MPC_CFM = "Reported confirmed malaria cases in pregnant women in the HFCA",
    MI = "Malaria incidence in the HFCA, clinical+confirmed cases, all ages",
    MI_CFM = "Malaria incidence in the HFCA, confirmed cases, all ages",
    MD_OV5 = "Malaria death in the HFCA, 5 years and older",
    MD_U5 = "Malaria death in the HFCA, under 5 years",
    MC_CFR = "Malaria case confirmation rate"
  ),
  units = .q(
    YEAR = years,
    MONTH = months,
    MC_CLN = cases,
    MC_CFM = cases,
    MPC_CLN = cases,
    MPC_CFM = cases,
    MI = "cases per 1000 people",
    MI_CFM = "cases per 1000 people",
    MD_OV5 = deaths,
    MD_U5 = deaths,
    MC_CFR = percent
  ),
  drop = .q(
    periodname
  ),
  HFCA = as.factor(HFCA)
) |> data.table::as.data.table()

qsave(zam_dh_hf, here(PATH_ZAM_DH_HF))

contents(zam_dh_hf)
```

see @sec-meta-data-date, @sec-meta-data-administrative, @sec-meta-data-malaria for more information.


### Village Population Table

```{r}
#| label: zam-updata-dh-vl-pop
#| lst-label: zam-updata-dh-vl-pop
#| lst-cap: Recode Village population table from DHIS2, Zambia
zam_dh_vl_pop <- upData(
  zam_dh_vl_pop,
  labels = c(
    VILLAGE = "Village name",
    POPULATION = "Village population"
  ),
  units = c(
    POPULATION = "people"
  ),
  VILLAGE = as.factor(VILLAGE)
)

qsave(zam_dh_vl_pop, here(PATH_ZAM_DH_VL_POP))
```

### Weekly Village Level Malaria

The village level data is reported by the health facilities. The raw data provided is aggregated by week and village.
The raw data was organized:

```{r}
zam_dh_vl_raw
```


```{r}
#| label: zam-updata-dh-vl
#| lst-label: zam-updata-dh-vl
#| lst-cap: Recode Village level weekly data from DHIS2, Zambia

```


### Household survey

```{r}
#| label: zam-updata-hh-hh
#| lst-cap: Recode household survey data from Zambia


# Clean and preprocess the data
zam_hh_hh <- upData(
    zam_hh_hh_raw,
    ID = convert_uuid("_id"),
    HOUSEHOLD_ID = convert_uuid("household_id"),
    

    .drop = .q(
      _row_etag,
      _sync_state,
      _conflict_type,
      _filter_type,
      _filter_value,
      _form_id,
      _locale,
      _savepoint_creator,
      instance_name
    ),
    
    # Convert date-time columns
    SAVEPOINT_TIMESTAMP = ymd_hms("_savepoint_timestamp"),

    # Convert numeric columns
    gps_location_latitude = as.numeric(gps_location_latitude),
    gps_location_longitude = as.numeric(gps_location_longitude),
    gps_location_altitude = as.numeric(gps_location_altitude),
    gps_location_accuracy = as.numeric(gps_location_accuracy),

    # Convert categorical variables to factors
    province = as.factor(province),
    district = as.factor(district),
    catchment = as.factor(catchment),
    ea = as.factor(ea),
    is_consent_given = as.factor(is_consent_given),
    house_section_visited = as.factor(house_section_visited),
    member_section_visited = as.factor(member_section_visited),

    # Replace empty strings with NA
    province = ifelse(province == "", NA, province),
    district = ifelse(district == "", NA, district),
    catchment = ifelse(catchment == "", NA, catchment),
    ea = ifelse(ea == "", NA, ea),
    household_head_name = ifelse(household_head_name == "", NA, household_head_name),


    # Handle specific columns
    head_attend_school = as.factor(head_attend_school),
    highest_level_of_school_attend = as.factor(highest_level_of_school_attend),
    drinking_water_source = as.factor(drinking_water_source),
    toilet_facility = as.factor(toilet_facility),
    fuel_hh_use = as.factor(fuel_hh_use),
    floor_material = as.factor(floor_material),
    wall_material = as.factor(wall_material),
    roof_material = as.factor(roof_material),
    eaves_open_close = as.factor(eaves_open_close),
    have_ceiling = as.factor(have_ceiling),
    type_of_ceiling = as.factor(type_of_ceiling),

    # Convert binary variables to logical
    have_electricity = as.logical(have_electricity == 1),
    have_radio = as.logical(have_radio == 1),
    have_tv = as.logical(have_tv == 1),
    have_mobile = as.logical(have_mobile == 1),
    have_non_mobile = as.logical(have_non_mobile == 1),
    have_refrigerator = as.logical(have_refrigerator == 1),
    have_bed = as.logical(have_bed == 1),
    have_chair = as.logical(have_chair == 1),
    have_table = as.logical(have_table == 1),
    have_cupboard = as.logical(have_cupboard == 1),
    have_sofa = as.logical(have_sofa == 1),
    have_clock = as.logical(have_clock == 1),
    have_fan = as.logical(have_fan == 1),
    have_sewing_machine = as.logical(have_sewing_machine == 1),
    have_cassette_player = as.logical(have_cassette_player == 1),
    have_plough = as.logical(have_plough == 1),
    have_grain_grinder = as.logical(have_grain_grinder == 1),
    have_vcr_dvd = as.logical(have_vcr_dvd == 1),
    have_tractor = as.logical(have_tractor == 1),
    have_vehicle = as.logical(have_vehicle == 1),
    have_hammer_mill = as.logical(have_hammer_mill == 1),

    # Handle time variables
    check = function(x) if (grepl("_time$", x)) parse_time(get(x), format = "%H:%M:%S") else get(x)
)

# Remove rows where consent is not given
cleaned_household_data <- cleaned_household_data[is_consent_given == 1]

# Test the cleaned data
print(str(cleaned_household_data))
print(summary(cleaned_household_data))

# Check for any remaining NA values
print(colSums(is.na(cleaned_household_data)))

# Save the cleaned data
qsave(here(PATH_ZAM_HH_HH))

```